<%-include('partials/header.ejs')%>
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.3.4/dist/leaflet.css" integrity="sha512-puBpdR0798OZvTTbP4A8Ix/l+A4dHDD0DGqYW6RQ+9jxkRFclaxxQb/SJAWZfWAkuyeQUytO7+7N4QKrDh+drA==" crossorigin=""/>
<link rel="stylesheet" href="stylemap.css">
<title>Map</title>
</head>
<body>
    <div id="map">
        <!-- emplacement de la map -->

        <!-- emplacement des boutons -->
        <div class="fixed-action-btn">
            <a class="btn-floating btn-large green" href="/dashboard">
              <i class="large material-icons">account_circle</i>
            </a>
        </div>
        <!-- bouton pour le tracking -->
        <div class="fixed-action-btn fixed-action-btn-2">
            <a class="btn-floating btn-small green" onClick="switchTracking()">
              <i class="large material-icons" id="bt-gps">gps_not_fixed</i>
            </a>
        </div>
    </div>
    <script src="https://unpkg.com/leaflet@1.3.4/dist/leaflet.js"
    integrity="sha512-nMMmRyTVoLYqjP9hrbed9S+FzjZHW5gY1TWCHA5ckwXZBadntCNs8kEqAWdrb9O7rxbCaA4lKTIWjDXZxflOcA=="
    crossorigin=""></script>
    <script type="text/javascript">
        //variable pour le suivi ou non de l'utilisateur
        var tracking = false;
        //creation de l'icone personnalisée pour le personnage
        var myIcon = L.icon({
            iconUrl: './img/HibouMarker.png',
            iconSize: [37, 51],
            iconAnchor: [17, 47]
        });
        //creation des variations de couleurs d'icones
        var greenIcon = new L.Icon({
            iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-green.png',
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });
        var redIcon = new L.Icon({
            iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',
            shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
            iconSize: [25, 41],
            iconAnchor: [12, 41],
            popupAnchor: [1, -34],
            shadowSize: [41, 41]
        });

        //creation des POIs
        var grpPOI1=[];
        var grpPOI2=[];
        //pour chaque POI on crée le marqueur associé et on lui assigne une icone correspondant à greenIcon ou redIcon
        //et on l'ajoute à un tableau grpPOI (1 ou 2 suivant le parcours)
        <% listpoi.forEach(function(poi){ %>
            var POI<%=poi.idPOI%> = new L.marker([<%=poi.lat%>, <%=poi.lon%>],{icon: <%=listjourney[(poi.idJourney)-1].color%>Icon}).bindPopup("<%=poi.titlePOI%><br><%=poi.descPOI%>");
            grpPOI<%=poi.idJourney%>.push(POI<%=poi.idPOI%>);
        <% }); %>
        //transforme les tableaux de POI en layers de POI
        var layerPOI1 = L.layerGroup(grpPOI1);
        var layerPOI2 = L.layerGroup(grpPOI2);
        //initialise une map avec les layers de POI
        var mymap = L.map('map', {layers: [layerPOI1,layerPOI2]} ).setView([43.107895, 0.723579], 18);
        L.tileLayer('https://cartodb-basemaps-{s}.global.ssl.fastly.net/rastertiles/voyager/{z}/{x}/{y}.png',{maxZoom: 21,attribution: 'Saint-GO',}).addTo(mymap);
        
        //Gestion des layer control (filtre)
        var baseLayers = {
            "Jeu de Piste 6/8ans": layerPOI1,
            "Jeu de Piste 9/11ans": layerPOI2,
        };
        //on crée les controles pour les layers sur l'écran de la map en bas à gauche
        L.control.layers(null,baseLayers, {position: 'bottomleft', collapsed: true}).addTo(mymap);

        //fonction qui sera appelée toutes les secondes pour update la position de l'utilisateur
        function GetPosMap(){
            // récupération de la position de l'utilisateur
            var lat,long;
            function maPosition(position) {
                lat = position.coords.latitude ;
                long = position.coords.longitude;
                if (typeof markerChar !== 'undefined'){
                    mymap.removeLayer(markerChar)
                }
                // affichage de la map
                markerChar = new L.Marker([lat, long], {icon: myIcon, draggable:false});
                mymap.addLayer(markerChar);
                //si le tracking est activé, on centre la vue sur l'utilisateur
                if (tracking){
                    mymap.setView([lat,long]);
                }
            }

            if(navigator.geolocation)
                navigator.geolocation.getCurrentPosition(maPosition);
            
        }
        //switch entre les  états de traking
        function switchTracking(){
            tracking=!tracking;
            console.log("tracking : "+tracking);
            var el = document.getElementById("bt-gps");
            if (tracking){
                // recup le dom du bouton gps et mettre innerHTML à gps_fixed
                el.innerHTML="gps_fixed";
            }else{
                // recup le dom du bouton gps et mettre innerHTML à gps_not_fixed
                el.innerHTML="gps_not_fixed";
            }
        }
        //le set interval qui lance le refresh de la position toutes les secondes
        var intervalID = window.setInterval(GetPosMap, 1000);

    </script>
<%-include('partials/footer.ejs')%>